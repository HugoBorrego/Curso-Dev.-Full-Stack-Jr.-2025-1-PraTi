const prompt = require("prompt-sync")

let listaNomes = ['Arthur', 'Bruno', 'Carlos', 'Daniel', 'Edurardo']

for (let i = 0; i < listaNomes.length; i++) { console.log(listaNomes[i]) }

let listaFrutas = Array()
listaFrutas[0] = 'Abacate' // Adicionando no array de indice 0
listaFrutas[1] = 'Banana' // Adicionando no array de indice 1

listaFrutas.push('Caqui') // Adicionando no final do array
listaFrutas.unshift('Melancia') // Adicionando no comeÃ§o do array
listaFrutas.push('pop')
listaFrutas.pop() // Excluindo o Ãºltimo do array
listaFrutas.unshift() // Excluindo no comeÃ§o do array

console.table(listaFrutas) // Mostra uma tabela com todos os elementos


// Crie um array chamado 'numeros' contendo valores numÃ©ricos a sua escolha
let numeros = [1, 2, 8, 4, 9, 6, 7, 3, 5, 10]
// Use mÃ©todos de array para calcular:
// A soma de todos elementos
 
let soma = numeros.reduce((acumulador, valor) => acumulador + valor, 0)
// MÃ‰TODO NORMAL for (let i = 0; i < numeros.length; i++) { soma += numeros[i] }


// MÃ©dia dos elementos
let media = 0
media = soma / numeros.length

// Gere um novo array chamado pares que contenha apenas os nÃºmeros pares do array numeros
let pares = numeros.filter((num => num % 2 == 0))
// MÃ‰TODO NORMAL for (let i = 0; i < numeros.length; i++) { if (numeros[i] % 2 == 0) { pares.push(numeros[i]) } }

console.log(soma)
console.log(media)
console.log(pares)

// Ordene um array numeros em ordem crescente
numeros = [5, 8, 1, 3, 9, 2]
let ordenado = numeros.sort((a, b) => a - b)
console.log(ordenado)


// MÃ‰TODO BubbleSort 
let valores = [3, 1, -4, 6, -1]
for (let i = 0; i < valores.length; i++) {
    for (let j = 0; j < valores.length - i; j++) {
        if (valores[j] > valores[j + 1]) {
            let temp = valores[j]
            valores[j] = valores[j + 1]
            valores[j + 1] = temp
        }
    }
}
console.log(valores)

// Matrizes

let matriz = []
let somar = 0
for (let i = 0; i < 3; i++) {
    matriz[i] = []
    for (let j = 0; j < 3; j++) {
        matriz[i][j] = 7
        // Calculo da diagonal da matriz
        if (i == j) { 
            somar += matriz[i][j] 
        }
    }
}
console.table(matriz)
console.log(somar)


let mercado = []
mercado['Fruteira'] = ['MaÃ§a', 'Pera', 'Abacaxi']
mercado['AÃ§ougue'] = ['Picanha', 'Alcatra', 'FilÃ©']

console.table(mercado)

let listaCoisas = Array()
listaCoisas['Hardware'] = ['Placa de VÃ­deo']
listaCoisas['Hardware'][1] = 'Smartwatch'
listaCoisas['Games'] = ['GTA VI']
listaCoisas['Games'][1] = 'The Witcher'
console.table(listaCoisas)


/*
ðŸ“Œ MÃ©todos de Array em JavaScript ðŸ“Œ

ðŸ”¹ push() - Adiciona elementos ao final do array.
ðŸ”¹ pop() - Remove o Ãºltimo elemento.
ðŸ”¹ shift() - Remove e retorna o primeiro elemento.
ðŸ”¹ unshift() - Adiciona elementos no inÃ­cio do array.
ðŸ”¹ concat() - Combina dois ou mais arrays.
ðŸ”¹ slice() - Retorna uma cÃ³pia de parte do array.
ðŸ”¹ splice() - Adiciona, remove ou substitui elementos.
ðŸ”¹ indexOf() - Retorna o primeiro Ã­ndice de um elemento.
ðŸ”¹ lastIndexOf() - Retorna o Ãºltimo Ã­ndice de um elemento.
ðŸ”¹ includes() - Verifica se o array contÃ©m um elemento.
ðŸ”¹ find() - Retorna o primeiro elemento que satisfaz uma condiÃ§Ã£o.
ðŸ”¹ findIndex() - Retorna o Ã­ndice do primeiro elemento que passa em um teste.
ðŸ”¹ forEach() - Executa uma funÃ§Ã£o em cada elemento.
ðŸ”¹ map() - Cria um novo array com os resultados de uma funÃ§Ã£o.
ðŸ”¹ filter() - Cria um novo array com elementos que passam em um teste.
ðŸ”¹ reduce() - Reduz o array a um Ãºnico valor.
ðŸ”¹ reduceRight() - Reduz o array da direita para a esquerda.
ðŸ”¹ some() - Verifica se ao menos um elemento satisfaz uma condiÃ§Ã£o.
ðŸ”¹ every() - Verifica se todos os elementos satisfazem uma condiÃ§Ã£o.
ðŸ”¹ sort() - Organiza os elementos do array.
ðŸ”¹ reverse() - Inverte a ordem dos elementos.
ðŸ”¹ join() - Junta os elementos em uma string.
ðŸ”¹ toString() - Converte o array para uma string.
ðŸ”¹ fill() - Preenche o array com um valor.
ðŸ”¹ copyWithin() - Copia parte do array para outra posiÃ§Ã£o.
ðŸ”¹ flat() - Achata sub-arrays atÃ© uma profundidade.
ðŸ”¹ flatMap() - Mapeia e achata o resultado em um novo array.
ðŸ”¹ isArray() - Verifica se o valor Ã© um array, retornando true ou false.
*/

